// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/figment-networks/terra-worker/client (interfaces: Api)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	structs "github.com/figment-networks/indexer-manager/structs"
	api "github.com/figment-networks/terra-worker/api"
	gomock "github.com/golang/mock/gomock"
	amino "github.com/tendermint/go-amino"
	reflect "reflect"
	sync "sync"
)

// MockApi is a mock of Api interface
type MockApi struct {
	ctrl     *gomock.Controller
	recorder *MockApiMockRecorder
}

// MockApiMockRecorder is the mock recorder for MockApi
type MockApiMockRecorder struct {
	mock *MockApi
}

// NewMockApi creates a new mock instance
func NewMockApi(ctrl *gomock.Controller) *MockApi {
	mock := &MockApi{ctrl: ctrl}
	mock.recorder = &MockApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApi) EXPECT() *MockApiMockRecorder {
	return m.recorder
}

// CDC mocks base method
func (m *MockApi) CDC() *amino.Codec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CDC")
	ret0, _ := ret[0].(*amino.Codec)
	return ret0
}

// CDC indicates an expected call of CDC
func (mr *MockApiMockRecorder) CDC() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CDC", reflect.TypeOf((*MockApi)(nil).CDC))
}

// GetBlocksMeta mocks base method
func (m *MockApi) GetBlocksMeta(arg0 context.Context, arg1 structs.HeightRange, arg2 uint64, arg3 *api.BlocksMap, arg4 chan<- error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetBlocksMeta", arg0, arg1, arg2, arg3, arg4)
}

// GetBlocksMeta indicates an expected call of GetBlocksMeta
func (mr *MockApiMockRecorder) GetBlocksMeta(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlocksMeta", reflect.TypeOf((*MockApi)(nil).GetBlocksMeta), arg0, arg1, arg2, arg3, arg4)
}

// SingularHeightWorker mocks base method
func (m *MockApi) SingularHeightWorker(arg0 context.Context, arg1 *sync.WaitGroup, arg2 chan api.TxResponse, arg3 chan api.ToGet) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SingularHeightWorker", arg0, arg1, arg2, arg3)
}

// SingularHeightWorker indicates an expected call of SingularHeightWorker
func (mr *MockApiMockRecorder) SingularHeightWorker(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SingularHeightWorker", reflect.TypeOf((*MockApi)(nil).SingularHeightWorker), arg0, arg1, arg2, arg3)
}

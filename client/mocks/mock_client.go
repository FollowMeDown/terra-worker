// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/figment-networks/terra-worker/client (interfaces: RPC,LCD)

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	structs "github.com/figment-networks/indexer-manager/structs"
	structs0 "github.com/figment-networks/indexer-manager/worker/connectivity/structs"
	api "github.com/figment-networks/terra-worker/api"
	types "github.com/figment-networks/terra-worker/api/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	sync "sync"
)

// MockRPC is a mock of RPC interface
type MockRPC struct {
	ctrl     *gomock.Controller
	recorder *MockRPCMockRecorder
}

// MockRPCMockRecorder is the mock recorder for MockRPC
type MockRPCMockRecorder struct {
	mock *MockRPC
}

// NewMockRPC creates a new mock instance
func NewMockRPC(ctrl *gomock.Controller) *MockRPC {
	mock := &MockRPC{ctrl: ctrl}
	mock.recorder = &MockRPCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRPC) EXPECT() *MockRPCMockRecorder {
	return m.recorder
}

// GetBlocksMeta mocks base method
func (m *MockRPC) GetBlocksMeta(arg0 context.Context, arg1 structs.HeightRange, arg2 uint64, arg3 *api.BlocksMap, arg4 chan<- error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetBlocksMeta", arg0, arg1, arg2, arg3, arg4)
}

// GetBlocksMeta indicates an expected call of GetBlocksMeta
func (mr *MockRPCMockRecorder) GetBlocksMeta(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlocksMeta", reflect.TypeOf((*MockRPC)(nil).GetBlocksMeta), arg0, arg1, arg2, arg3, arg4)
}

// RawToTransactionCh mocks base method
func (m *MockRPC) RawToTransactionCh(arg0 *sync.WaitGroup, arg1 <-chan types.TxResponse, arg2 map[uint64]structs.Block, arg3 chan structs0.OutResp) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RawToTransactionCh", arg0, arg1, arg2, arg3)
}

// RawToTransactionCh indicates an expected call of RawToTransactionCh
func (mr *MockRPCMockRecorder) RawToTransactionCh(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawToTransactionCh", reflect.TypeOf((*MockRPC)(nil).RawToTransactionCh), arg0, arg1, arg2, arg3)
}

// SingularHeightTxWorker mocks base method
func (m *MockRPC) SingularHeightTxWorker(arg0 context.Context, arg1 *sync.WaitGroup, arg2 chan types.TxResponse, arg3 chan api.ToGet) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SingularHeightTxWorker", arg0, arg1, arg2, arg3)
}

// SingularHeightTxWorker indicates an expected call of SingularHeightTxWorker
func (mr *MockRPCMockRecorder) SingularHeightTxWorker(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SingularHeightTxWorker", reflect.TypeOf((*MockRPC)(nil).SingularHeightTxWorker), arg0, arg1, arg2, arg3)
}

// MockLCD is a mock of LCD interface
type MockLCD struct {
	ctrl     *gomock.Controller
	recorder *MockLCDMockRecorder
}

// MockLCDMockRecorder is the mock recorder for MockLCD
type MockLCDMockRecorder struct {
	mock *MockLCD
}

// NewMockLCD creates a new mock instance
func NewMockLCD(ctrl *gomock.Controller) *MockLCD {
	mock := &MockLCD{ctrl: ctrl}
	mock.recorder = &MockLCDMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLCD) EXPECT() *MockLCDMockRecorder {
	return m.recorder
}

// GetReward mocks base method
func (m *MockLCD) GetReward(arg0 context.Context, arg1 structs.HeightAccount) (structs.GetRewardResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReward", arg0, arg1)
	ret0, _ := ret[0].(structs.GetRewardResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReward indicates an expected call of GetReward
func (mr *MockLCDMockRecorder) GetReward(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReward", reflect.TypeOf((*MockLCD)(nil).GetReward), arg0, arg1)
}
